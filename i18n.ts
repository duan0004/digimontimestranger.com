import { getRequestConfig } from 'next-intl/server';
import { notFound } from 'next/navigation';

// Define supported locales
export const locales = [
  'en',       // English
  'ja',       // Japanese
  'ko',       // Korean
  'es',       // Spanish
  'de',       // German
  'fr',       // French
  'ru',       // Russian
  'it',       // Italian
  'pt',       // Portuguese
  'nl',       // Dutch
  'vi',       // Vietnamese
  'th',       // Thai
  'ms',       // Malay
  'fil',      // Filipino
  'zh-CN',    // Simplified Chinese (moved to last)
] as const;
export type Locale = (typeof locales)[number];

// Define default locale
export const defaultLocale: Locale = 'en';

// Locale labels in native language
export const localeLabels: Record<Locale, string> = {
  en: 'English',
  ja: 'Êó•Êú¨Ë™û',
  ko: 'ÌïúÍµ≠Ïñ¥',
  es: 'Espa√±ol',
  de: 'Deutsch',
  fr: 'Fran√ßais',
  ru: '–†—É—Å—Å–∫–∏–π',
  it: 'Italiano',
  pt: 'Portugu√™s',
  nl: 'Nederlands',
  vi: 'Ti·∫øng Vi·ªát',
  th: '‡πÑ‡∏ó‡∏¢',
  ms: 'Bahasa Melayu',
  fil: 'Filipino',
  'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá',
};

// Locale flags (emoji or icon identifiers)
export const localeFlags: Record<Locale, string> = {
  en: 'üá∫üá∏',
  ja: 'üáØüáµ',
  ko: 'üá∞üá∑',
  es: 'üá™üá∏',
  de: 'üá©üá™',
  fr: 'üá´üá∑',
  ru: 'üá∑üá∫',
  it: 'üáÆüáπ',
  pt: 'üáµüáπ',
  nl: 'üá≥üá±',
  vi: 'üáªüá≥',
  th: 'üáπüá≠',
  ms: 'üá≤üáæ',
  fil: 'üáµüá≠',
  'zh-CN': 'üá®üá≥',
};

export default getRequestConfig(async ({ requestLocale }) => {
  // Validate that the incoming locale parameter is valid
  let locale = await requestLocale;

  if (!locale || !locales.includes(locale as Locale)) {
    notFound();
  }

  return {
    locale,
    messages: (await import(`./locales/${locale}.json`)).default,
  };
});
